!!! 5
%html
  %meta{ 'http-equiv' => "X-UA-Compatible",  'content' => "IE=edge"}
  // Load all the javascript ansd stylesheet dependencies
  %script{type:'text/javascript', src: "Tangle.js"}
  - %w{mootools sprintf BVTouchable TangleKit TKLogarithmicAdjustableNumber}.each do |js|
    %script{type:'text/javascript', src: "TangleKit/#{js}.js"}
  %script{type:'text/javascript', src: "d3.min.js"}

  // Prepare the CSS
  %link{rel:'stylesheet', href:'TangleKit/TangleKit.css', type: 'text/css'}
  :css
    body {
      padding: 2% 5%;
    }
    span.note {
      display: block;
      font-size: 0.8em;
      color: #aaa;
    }
    span.note a {
      color: #999;
    }
    span[data-var] {
      background-color: #FFFDCC;
    }
    span[data-var].TKAdjustableNumber, span[data-var].TKLogarithmicAdjustableNumber {
      background-color: #fff;
    }
    span.result {
      font-weight: bold;
    }
    td.control {
      text-align: right;
      width: 150px;
    }
    div#warning {
      background: yellow;
      border: solid 1px black;
      padding: 5px;
      margin: 5px;
      width: 100%;
      text-align: center;
    }
    #levelised_cost_chart {
      float: right;
      width: 400px;
      height: 400px;
      margin: 0;
      padding: 0;
    }
    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }

    .yaxislabel {
      text-anchor: end;
    }

    .xaxislabel {
      text-anchor: middle;
    }

    .line {
      fill: none;
      stroke: black;
      stroke-width: 3px;
    }

    .gas {
      stroke: green;
    }

    .nuclear {
      stroke: blue;
    }

    text.label {
      dominant-baseline: middle;
    }

    tr.series td.label {
      width: 150px;
    }

    td.data {
      text-align: right;
    }

  // Draw the interface
  %body
    %h1 When could nuclear-electricity be cheaper than gas-electricity?

    %div#warning Work in progress

    #levelised_cost_chart

    #tangle
      %table
        %tr
          %th
          %th{colspan:2} Gas-electricity
          %th{colspan:2} Nuclear-electricity
        %tr
          %th Setting
          %th Today
          %th Annual change
          %th Today
          %th Annual change

        - technologies = %w{ gas nuclear }
        :ruby
          parameters = [
            ['Pre-development cost', 'predev', '&pound;/kW',  0, 5000, true, %w{gas nuclear}],
            ['Capital cost', 'capex', '&pound;/kW',  100, 5000, true, %w{gas nuclear}],
            ['Fixed operating cost', 'opex', '&pound;/kW-yr',  1, 50, true, %w{gas nuclear}],
            ['Variable operating cost', 'variable_opex', '&pound;/MWh',  0, 10, true, %w{gas nuclear}],
            ['Connection and use of system', 'connection_charge', '&pound;/kW-yr',  0, 100, false, %w{gas nuclear}],
            ['Insurance', 'insurance', '&pound;/MW-yr',  0, 500, false, %w{nuclear}],
            ['Decomissioning', 'decommissioning', '&pound;/kW',  0, 100000, false, %w{nuclear}],
            ['Fuel', 'fuel', '&pound;/MWh',  10, 100, true, %w{gas nuclear}],
            ['Carbon', 'carbon', '&pound;/tCO2',  0, 500, true, %w{gas}],
            ['Pre-development time', 'predev_time', 'yr',  1, 6, false, %w{gas nuclear}],
            ['Construction time', 'construction_time', 'yr',  1, 15, true, %w{gas nuclear}],
            ['Plant life', 'life', 'years',  10, 60, false, %w{gas nuclear}]
          ]
        - parameters.each do |p|
          %tr
            %td= p[0]
            - technologies.each do |t|
              %td.control
                - if p[6].include?(t)
                  %span.TKLogarithmicAdjustableNumber{data:{ var: p[1]+"_"+t, min: p[3], max: p[4]}}
                    = p[2]
              %td.control
                - if p[5]
                  %span.TKAdjustableNumber{data:{var: p[1]+"_change_"+t, format: 'percent', step: 0.01, min: -0.2, max: 0.2}}
        %tr
          %td
            Cost of capital
          %td.control
            %span.TKAdjustableNumber{data:{var: 'wacc_gas', format: 'percent', step: 0.01, min: 0, max: 0.5}}
          %td &nbsp;
          %td.control
            %span.TKAdjustableNumber{data:{var: 'wacc_nuclear', format: 'percent', step: 0.01, min: 0, max: 0.5}}
          %td &nbsp;
        %tr
          %td
            Load factor
          %td.control
            %span.TKAdjustableNumber{data:{var: 'load_factor', format: 'percent', step: 0.01, min: 0, max: 1.0}}
          %td &nbsp;
          %td.control
            %span.TKAdjustableNumber{data:{var: 'load_factor', format: 'percent', step: 0.01, min: 0, max: 1.0}}
        %tr
          %td
            Efficiency
          %td.control
            %span.TKAdjustableNumber{data:{var: 'efficiency_gas', format: 'percent', step: 0.01, min: 0.1, max: 0.7}}
          %td &nbsp;
          %td.control &nbsp;

    %h2 Data table

    %h3 Costs that change over time
    %table#data
      %thead
        %tr.header
          %th.title
      %tbody

    %h3 Components of the levelised cost of gas
    %table#gasData
      %thead
        %tr.header
          %th.label Parameter
      %tbody
      %tfoot
        %tr.total
          %td.title
            Total

    %h3 Components of the levelised cost of nuclear
    %table#nuclearData
      %thead
        %tr.header
          %th.label Parameter
      %tbody
      %tfoot
        %tr.total
          %td.title
            Total

    %h2 Notes

    %ul
      %li The plant has the same operating cost for its entire life, but the operating cost varies depending on the year in which the plant is built
      %li Finance rates must be the net post tax effective rate

    #links
      The source code for this tangle is at 
      %a{href: 'https://github.com/tamc/tamc-tangles/blob/gh-pages/whenwillitbecheaperthangas.haml'} https://github.com/tamc/tamc-tangles/blob/gh-pages/whenwillitbecheaperthangas.haml
      is &copy; Tom Counsell and is licenced under the open-source
      %a{href: 'http://opensource.org/licenses/MIT'}MIT
      license. Please suggest fixes and report bugs at 
      %a{href: 'http://github.com/tamc/tamc-tangles'}http://github.com/tamc/tamc-tangles


  // Do the caclulations
  :coffeescript
    # This takes a first number, a number of periods and a multiplier to apply to that first
    # number each period. It returns an array.
    #
    # e.g., expandArray(10, 5, 0.1) # =  [10, 11, 12.1, 13.31, 14.641] 
    expandArray = (number, periods, change_per_period = 0) ->
      result = [number]
      return result if periods == 1
      return [] if periods < 1
      for i in [1..(periods-1)]
        result[i] = result[i-1] * (1+change_per_period)
      result

    # This takes a first number, a number of periods and a number to add to that first
    # number each period. It returns an array.
    #
    # e.g., expandArrayIncremental(10, 5, 2) # =  [10, 12, 14, 16, 18] 
    expandArrayIncremental = (number, periods, change_per_period = 0) ->
      result = [number]
      return result if periods == 1
      return [] if periods < 1
      for i in [1..(periods-1)]
        result[i] = result[i-1] + change_per_period
      result

    # This calculates the net present value of the content of the first argument
    # using the second argument as the discount factor. If the third argument is
    # zero then the first element of the array has a discount factor of 1
    # if it is 1 then the first element of the array has a discount factor of (1+discount_factor)
    npv = (array, discount_factor, initial_offset = 0) ->
      n = 0
      df = (1/(1+discount_factor))
      r = Math.pow(df,initial_offset)
      for v in array
        n = n + (v*r)
        r = r * df
      n

    multiply = ( array1, array2) ->
      for a, i in array1
        a * array2[i]

    start_year = 2015
    end_year = 2055

    tangle =
      initialize: () ->

        # FIRST THE TANGLE VARIABLES

        # Things that are common to both technologies and change
        @capex_gas = 600 # £/kW
        @capex_nuclear = 4100
        @capex_change_gas = 0
        @capex_change_nuclear = 0

        @predev_gas = 10 # £/kW
        @predev_nuclear = 210 # £/kW
        @predev_change_gas = 0
        @predev_change_nuclear = 0

        @opex_nuclear = 72 # £/kW/yr
        @opex_change_nuclear = 0
        @opex_gas = 22
        @opex_change_gas = 0

        @fuel_gas = 20 # £/MWh
        @fuel_change_gas = 0
        @fuel_nuclear = 5 # £/MWh
        @fuel_change_nuclear = 0

        # Things that are common to both technologies but don't change
        @life_nuclear = 60
        @life_gas = 25

        @wacc_gas = 0.075
        @wacc_nuclear = 0.095

        @predev_time_gas = 2 # years
        @predev_time_nuclear = 5 # years

        @construction_time_gas = 3 # years
        @construction_time_nuclear = 6 # years

        @connection_charge_gas = 9 # £/kW/yr
        @connection_charge_nuclear = 7 # £/kW/yr

        @variable_opex_gas = 0.1 # £/MWh
        @variable_opex_nuclear = 3 # £/MWh

        # Things that are only relevant to gas
        @carbon_gas = 12 # £/tCO2e
        @carbon_change_gas = 0

        @efficiency_gas = 0.55
        @emissions_intensity_gas= 380 # gCO2/kWh

        # Things that are only relevant to nuclear
        @decommissioning_nuclear = 43500 # £/kW # This is what it would need to be to work out as £2/MWh
        @insurance_nuclear = 10 # £/kW/yr

        # Things that should be identical for both
        @load_factor = 0.93

        # Results
        @levelised_cost_gas = []
        @levelised_cost_nuclear = []

        # THEN THE CHART

        margin =
          top: 25
          right: 50
          bottom: 20
          left: 50

        width = 400
        height = 300

        unit = "£/MWh"

        @xScale = xScale = d3.scale.linear()
                  .domain([start_year, end_year])
                  .range([0, width - margin.left - margin.right])

        @yScale = yScale = d3.scale.linear()
                  .domain([0, 200])
                  .range([height - margin.top - margin.bottom, 0])

        xAxis = d3.svg.axis()
          .scale(xScale)
          .orient("bottom")
          .tickFormat(d3.format("0.f"))

        yAxis = d3.svg.axis().scale(yScale).orient("left")

        @line = d3.svg.line()
          .x((d,i) -> xScale(start_year+d.year.project_start))
          .y((d,i) -> yScale(+d.total))

        chart = d3.select("#levelised_cost_chart")
                  .append("svg")
                    .append("g")
                      .attr('class', 'drawing')
                      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

        chart.append("path")
          .attr('class', 'line gas')

        chart.append("path")
          .attr('class', 'line nuclear')

        chart.append("g")
          .attr('class', 'x axis')
          .attr("transform", "translate(0," + yScale.range()[0] + ")")
          .call(xAxis)

        chart.append("g")
          .attr('class', 'y axis')
          .attr("transform", "translate(0," + xScale.range()[0] + ")")
          .call(yAxis)

        chart.append("text")
          .attr('class', 'xaxislabel')
          .attr("transform", "translate("+((xScale.range()[0]+xScale.range()[1])/2.0)+","+(yScale.range()[0]+35)+")")
          .text("Year in which construction starts")

        chart.append("text")
          .attr('class', 'yaxislabel')
          .attr("transform", "translate(0," + (xScale.range()[0] - 10) + ")")
          .text(unit)

        chart.append("text")
          .attr('class', 'gas label')
          .attr("transform", "translate(" + (xScale.range()[1]) + ",0)")
          .text("Gas")

        chart.append("text")
          .attr('class', 'nuclear label')
          .attr("transform", "translate(" + (xScale.range()[1]) + ",0)")
          .text("Nuclear")

      update: () ->

        time_horizon = end_year - start_year + Math.max(@life_nuclear, @life_gas)
        
        for p in ['capex', 'opex', 'fuel', 'carbon', 'predev']
          @[p+"_over_time_gas"] = expandArray(@[p+"_gas"], time_horizon, @[p+"_change_gas"]) if @[p+"_gas"]?
          @[p+"_over_time_nuclear"] = expandArray(@[p+"_nuclear"], time_horizon, @[p+"_change_nuclear"]) if @[p+"_nuclear"]?

        for construction_start in [0..(end_year-start_year)]
          # Work out the answer for gas
          life = @life_gas
          construction_time = @construction_time_gas
          predev_time = @predev_time_gas
          operation_start = construction_start + predev_time + construction_time
          operation_end = operation_start + life

          load_factor = @load_factor
          efficiency = @efficiency_gas
          emissions_intensity = @emissions_intensity_gas
          cost_of_fuel = @fuel_over_time_gas.slice(operation_start, operation_end)
          carbon_cost = (@carbon_over_time_gas.slice(operation_start, operation_end))
          capex = @capex_over_time_gas[construction_start]
          predev = @predev_over_time_gas[construction_start]
          opex = @opex_over_time_gas[construction_start]
          variable_opex = @variable_opex_gas
          wacc = @wacc_gas
          connection = @connection_charge_gas

          electricity_produced = expandArray(load_factor*365.25*24/1000, life) # MWh
          fuel_used = ((e/efficiency) for e in electricity_produced) # MWh
          carbon_emitted = ((f*emissions_intensity/1000) for f in fuel_used) # tCO2
          fuel_cost = multiply(cost_of_fuel, fuel_used) # £
          carbon_cost = multiply(carbon_cost, carbon_emitted) # £
          predev_cost = expandArray(predev/predev_time, predev_time) # £
          capex_cost = expandArray(capex/construction_time, construction_time)
          opex_cost = expandArray(opex, life) # £
          variable_cost = multiply(expandArray(variable_opex, life), electricity_produced)
          connection_cost = expandArray(connection, life) # £

          npv_electricity_produced = npv(electricity_produced, wacc, predev_time + construction_time)

          levelise = (array, offset = 0) ->
            npv(array, wacc, offset) / npv_electricity_produced

          costs =
            year:
              project_start: construction_start
              operate: operation_start
            components:
              predev: levelise(predev_cost, 0)
              capex: levelise(capex_cost, predev_time)
              opex: levelise(opex_cost, predev_time + construction_time)
              variable_opex: levelise(variable_cost, predev_time + construction_time)
              connection: levelise(connection_cost, predev_time + construction_time)
              fuel: levelise(fuel_cost, predev_time + construction_time)
              carbon: levelise(carbon_cost, predev_time + construction_time)
            total: 0

          for p, v of costs.components
            costs.total = costs.total + v

          @levelised_cost_gas[construction_start] = costs

          # Work out the answer for nuclear
          load_factor = @load_factor
          construction_time = @construction_time_nuclear
          predev_time = @predev_time_nuclear
          life = @life_nuclear
          operation_start = construction_start + predev_time + construction_time
          operation_end = operation_start + life

          decommissioning = @decommissioning_nuclear
          insurance = @insurance_nuclear

          capex = @capex_over_time_nuclear[construction_start]
          opex = @opex_over_time_nuclear[construction_start]
          variable_opex = @variable_opex_nuclear
          cost_of_fuel = @fuel_over_time_nuclear.slice(operation_start, operation_end)
          predev = @predev_over_time_nuclear[construction_start]
          connection = @connection_charge_nuclear
          wacc = @wacc_nuclear

          electricity_produced = expandArray(load_factor*365.25*24/1000, life) # MWh
          capex_cost = expandArray(capex/construction_time, construction_time)
          decomissioning_cost = [decommissioning] # £
          predev_cost = expandArray(predev/predev_time, predev_time) # £
          opex_cost = expandArray(opex, life) # £
          variable_cost = multiply(expandArray(variable_opex, life), electricity_produced)
          insurance_cost = expandArray(insurance, life) # £
          connection_cost = expandArray(connection, life) # £
          fuel_cost = multiply(cost_of_fuel, electricity_produced) # £

          npv_electricity_produced = npv(electricity_produced, wacc, predev_time + construction_time)

          costs =
            year:
              project_start: construction_start
              operate: operation_start
            components:
              predev: levelise(predev_cost, 0)
              capex: levelise(capex_cost, predev_time)
              opex: levelise(opex_cost, predev_time + construction_time)
              variable_opex: levelise(variable_cost, predev_time + construction_time)
              fuel: levelise(fuel_cost, predev_time + construction_time)
              connection: levelise(connection_cost, predev_time + construction_time)
              insurance: levelise(insurance_cost, predev_time + construction_time)
              decommissioning: levelise(decomissioning_cost, predev_time + construction_time + life)
            total: 0

          for p, v of costs.components
            costs.total = costs.total + v

          @levelised_cost_nuclear[construction_start] = costs

        chart = d3.select("#levelised_cost_chart .drawing")

        chart.select("path.gas")
          .transition()
          .attr("d", @line(@levelised_cost_gas))

        chart.select("path.nuclear")
          .transition()
          .attr("d", @line(@levelised_cost_nuclear))

        chart.select("text.gas")
          .transition()
          .attr("transform", "translate(" + (@xScale.range()[1]) + ","+@yScale(@levelised_cost_gas[@levelised_cost_gas.length-1].total)+")")

        chart.select("text.nuclear")
          .transition()
          .attr("transform", "translate(" + (@xScale.range()[1]) + ","+@yScale(@levelised_cost_nuclear[@levelised_cost_nuclear.length-1].total)+")")

        table = d3.select("table#data")

        years = table.selectAll("th.year")
          .data(["Parameter"].concat(expandArrayIncremental(start_year, time_horizon, 1)))

        years.enter().append("th")
          .attr('class','year')

        years.exit().remove()

        years.text((d) -> d)

        time_series = for p in ['capex', 'opex', 'fuel', 'carbon']
          {name: p+" over time gas", values: @[p+"_over_time_gas"]}

        for p in ['capex', 'opex', 'fuel']
          time_series.push({name: p+" over time nuclear", values: @[p+"_over_time_nuclear"]})

        series = table.selectAll("tr.series")
          .data(time_series)

        series.enter().append("tr")
          .attr('class', 'series')
          .append("td")
            .attr("class", "label")
            .text((d) -> d.name)

        series.exit().remove()

        data_format = d3.format("0f")

        annual_data = series.selectAll("td.data")
          .data((d) -> d.values)

        annual_data.enter().append("td")
          .attr('class', 'data')

        annual_data
          .text((d) -> data_format(d))

        annual_data.exit().remove()
        
        update_component_table = (table_id, lc) ->
          table = d3.select(table_id)

          years = table.select("tr.header").selectAll("th.year")
            .data(expandArrayIncremental(start_year, end_year - start_year + 1, 1))

          years.enter().append("th")
            .attr('class','year')

          years.exit().remove()

          years.text((d) -> d)

          series = table.select("tbody").selectAll("tr.components")
            .data(d3.map(lc[0].components).keys())

          series.enter().append("tr")
            .attr('class', 'components')
            .append("td")
              .attr("class", "label")
              .text((d) -> d)

          series.exit().remove()


          annual_data = series.selectAll("td.data")
            .data((d) -> lc.map( (e) -> e.components[d] ))

          annual_data.enter().append("td")
            .attr('class', 'data')

          annual_data
            .text((d) -> data_format(d))

          annual_data.exit().remove()

          totals = table.select("tfoot tr").selectAll("td.data")
            .data(lc.map( (e) -> e.total))

          totals.enter().append("td")
            .attr('class', 'data')

          totals
            .text((d) -> data_format(d))

          totals.exit().remove()

        update_component_table('table#gasData', @levelised_cost_gas)
        update_component_table('table#nuclearData', @levelised_cost_nuclear)


    t = new Tangle(document.getElementById("tangle"), tangle)
